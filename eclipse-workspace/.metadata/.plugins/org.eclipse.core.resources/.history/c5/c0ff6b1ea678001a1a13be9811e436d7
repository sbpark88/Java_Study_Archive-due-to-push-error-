
public class lecture3 {
	public static void main(String[] args) {
		SaveBox pig1 = new SaveBox();
		SaveBox pig2 = new SaveBox();
		// int a와 int b가 같은 int지만 서로 다른 a와 b인 것처럼, 같은 Svaebox 클래스지만 pig1과 pig2는 다르다.
		// 즉, pig1도 deposit 메소드를 하고, pig2도 deposit 메소드를 하지만 둘은 서로 다른 세계다.
		// (Svabox = 우주, pig = 나, depoist = 로또 당첨. 나와 다른 평행우주에 살고 있는 또 다른 내가 로또에 당첨되는 것은 서로 별개다.)
		// 객체지향 기법이라 이름을 붙인 만큼 현실 세계에 반영시켜 이해를 해보면 쉽다.
		
		
		pig1.deposit(100);
		pig1.deposit(500);
		pig1.deposit(200);
		pig1.deposit(300);
		pig1.deposit(500);
		
		pig2.deposit(20000);
		
		pig1.withdraw();
		pig2.withdraw();
		
		pig2.coinAmount = 200; // 작동한다. pig2에 가서 coinAmout의 데이터에 직접 접근해서 200을 넣어버린다.
//		1. 일반적으로 객체 내부의 데이터는 외부에서 접근 못하게 한다. - 자바는 이쪽을 따르는게 업계의 룰. / 파이썬에서는 그냥 직접 접근하는 것이 업계의 룰.
//		2. 단, 현대 프로그래밍 기법에서는 필요에 의해서 접근을 허용한다. setter, getter 개념을 따른다. (자바쪽 업계의 룰)
		
		// 이것 막기 위해 클래스 상에 private int coinAmount로 선언한다. 이렇게 하면 메소드로만 접근이 가능하다.
		
		pig2.withdraw();
		
		
	}

}
